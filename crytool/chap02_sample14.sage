print("\n# CHAP02--SAMPLE 14: =========")

# the plaintext/ciphertext alphabet is a binary sequence
B = BinaryStrings(); # print("B", B); print("B.alphabet()", B.alphabet())


# substitution cipher over the alphabet B; no keylen argument possible
S = SubstitutionCryptosystem(B)
print("1. Substitution: alphabet_size:", S.alphabet_size())

# Alternative: To get a substitute for each symbol, key has always the length of the alphabet
# key = S.random_key()
key = B("10") # "10" inverts all bits, "01" leaves them unchanged; "0", "1", "00" and "11" cause exception!
print("key: ", key, "  keylen: ", len(key))
# print("##type key: ", type(key))

P = "MA-Substitution on binary alphabet is very unsecure (flip bit or not)."; print("P:  ", P, "       Plen:", len(P))
msg = B.encoding(P); print("msg:", msg, "  msglen:", len(msg))

C   = S.enciphering(key, msg); print("C:  ", C, "  Clen: ", len(C))
DC  = S.deciphering(key, C); # print("DC: ", DC)

print("msg == DC:", msg == DC)  # Expect True



S = ShiftCryptosystem(B) # Shift in the binary alphabet B which has only two elements.
print("\n2. Shift: alphabet_size:", S.alphabet_size())

# Alternative: key = S.random_key(); print("randK:", key)
# print("##type key: ", type(key))
key   = 1; print("key:", key)   # 1 inverts each bit; 0 leaves each bit unchanged.

P = "Shift on binary alphabet offers only 2 possibilities: very unsecure."; print("P:  ", P, "       Plen:", len(P))
msg = B.encoding(P); print("msg:", msg, "  msglen:", len(msg))

C   = S.enciphering(key, msg); print("C:  ", C, "  Clen: ", len(C))
DC  = S.deciphering(key, C); # print("DC: ", DC)

print("msg == DC:", msg == DC)  # Expect True



keylen = 14;
# Alternative settings for alphabet and using a given key
# B = AlphabeticStrings(); key = B('ABCDEFGHIJKLMN'); print("key:", key, "  keylen: ", len(key))
# B = BinaryStrings(); key = B('11111111111111'); print("key:", key, "  keylen: ", len(key))
V = VigenereCryptosystem(B, keylen)
print("\n3. Vigenere: alphabet_size:", V.alphabet_size())
key = V.random_key(); print("randkey:", key, "  keylen: ", len(key))

msg = V.encoding("Vigenere on binary alphabet with long key is close to a OTP."); print("msg:", msg, "  msglen:", len(msg))
C   = V.enciphering(key, msg); print("C:  ", C, "  Clen: ", len(C))
DC  = V.deciphering(key, C); # print("DC: ", DC)

print("msg == DC:", msg == DC)  # Expect True

#------------------------------------
# CHAP02--SAMPLE 14: ========= 
# 1. Substitution: alphabet_size: 2
# key:  10   keylen:  2
# P:   MA-Substitution on binary alphabet is very unsecure (flip bit or not).        Plen: 70
# msgmsglen: 560
len:  560
# msg == DC: True
# 
# 2. Shift: alphabet_size: 2
# key: 1
# P:   Shift on binary alphabet offers only 2 possibilities: very unsecure.        Plen: 68
# msgmsglen: 544
len:  544
# msg == DC: True
# 
# 3. Vigenere: alphabet_size: 2
# randkey: 00001100010000   keylen:  14
# msg: 010101100110100101100111011001010110111001100101011100100110010100100000011011110110111000100000011000100110100101101110011000010111001001111001001000000110000101101100011100000110100001100001011000100110010101110100001000000111011101101001011101000110100000100000011011000110111101101110011001110010000001101011011001010111100100100000011010010111001100100000011000110110110001101111011100110110010100100000011101000110111100100000011000010010000001001111010101000101000000101110   msglen: 480
# C:   010110100010100101010110011001011010101001100110011000100110100101100000010111100110111011100100011000010111100101100010001000010100001101111001111001000110001001111100011111000010100001010000011000101010000101110111001100000111101100101001010001010110100011100100011011110111111101100010001001110001000101101011101000010111101000110000011001010011001100010001011000111010100001101100011000110110100101100000010001010110111111100100011000100011000001000011000101000110000100101110   Clen:  480
# msg == DC: True
